
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;
import org.knowm.xchart.style.markers.None;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jessa
 */
public class AnsLab3 extends javax.swing.JFrame {

    private final Map<Character, double[]> scaleMap;

    /**
     * Creates new form AnsLab3
     */
    public AnsLab3() {
        scaleMap = new HashMap<>();
        initScaleMap();
        initComponents();
        initSlidingWindowCbo();
        initThresholdSlider();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        import_btn = new javax.swing.JButton();
        reset_btn = new javax.swing.JButton();
        generate_btn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        setDefault_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        slidingwindow_cbo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        hydroscale_cbo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        thresholdSlider = new javax.swing.JSlider();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DNA Sequence Processing and Analysis");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Analyzing Protein Sequence by Hydrophobicity Plots");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        textarea.setColumns(20);
        textarea.setRows(5);
        textarea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textareaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(textarea);

        import_btn.setText("Import Fasta File");
        import_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_btnActionPerformed(evt);
            }
        });

        reset_btn.setText("Reset");
        reset_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_btnActionPerformed(evt);
            }
        });

        generate_btn.setText("Generate Plot");
        generate_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_btnActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Settings", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        setDefault_btn.setText("Set Default Settings");
        setDefault_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefault_btnActionPerformed(evt);
            }
        });

        jLabel3.setText("Sliding Window Length:");

        jLabel4.setText("Hydrophobicity Scale:");

        hydroscale_cbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kyle-Doolitle", "Hopp-Woods", "Cornette", "Eisenberg", "Rose", "Janin", "Engelman GES", " " }));
        hydroscale_cbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hydroscale_cboActionPerformed(evt);
            }
        });

        jLabel5.setText("Ave. Hydrophobicity Threshold");

        thresholdSlider.setMajorTickSpacing(5);
        thresholdSlider.setMaximum(25);
        thresholdSlider.setMinimum(5);
        thresholdSlider.setPaintLabels(true);
        thresholdSlider.setPaintTicks(true);
        thresholdSlider.setValue(10);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(72, Short.MAX_VALUE)
                        .addComponent(setDefault_btn))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hydroscale_cbo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(thresholdSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(slidingwindow_cbo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(slidingwindow_cbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hydroscale_cbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setDefault_btn)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(import_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generate_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                                .addComponent(reset_btn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(import_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(generate_btn))
                            .addComponent(reset_btn))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textareaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textareaMouseClicked

    }//GEN-LAST:event_textareaMouseClicked

    private void generate_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_btnActionPerformed
        String[] text = textarea.getText().split("\n");
        int windowLength = Integer.valueOf((String) slidingwindow_cbo.getSelectedItem());
        int scaleChosen = hydroscale_cbo.getSelectedIndex();
        System.out.printf("Window length is %d with scale %d\n", windowLength, scaleChosen);
        double threshold = this.thresholdSlider.getValue() / 10.0;

        ArrayList<ProteinSequence> seq = new ArrayList<>();

        for (int i = 0; i < text.length;) {
            if (text[i].startsWith(">")) {
                String comment = text[i].substring(1);
                String sequence = "";
                for (int j = i + 1; j < text.length; j++, i = j) {
                    if (text[j].isEmpty() || text[j].startsWith(">")) {
                        break;
                    }
                    sequence += text[j];
                }
                seq.add(new ProteinSequence(comment, sequence));
                if (sequence.isEmpty()) {
                    i++;
                }
            } else if (!text[i].isEmpty()) {
                String comment = null;
                String sequence = "";
                for (int j = i; j < text.length; j++, i = j) {
                    if (text[j].isEmpty() || text[j].startsWith(">")) {
                        break;
                    }
                    sequence += text[j];
                }
                seq.add(new ProteinSequence(comment, sequence));
                if (sequence.isEmpty()) {
                    i++;
                }
            } else {
                i++;
            }
        }
        generatePlot(windowLength, scaleChosen, threshold, seq);
        initThresholdSlider();

    }//GEN-LAST:event_generate_btnActionPerformed

    private void import_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_btnActionPerformed
        // TODO add your handling code here:
        String filename = "";
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println(selectedFile.getName());
            filename = selectedFile.getName();
        }
        String line, input = "";

        try {
            BufferedReader reader = new BufferedReader(new FileReader(filename));

            while ((line = reader.readLine()) != null) {

                input += line;
                input += "\n";
            }
        } catch (FileNotFoundException ex) {
           
        } catch (IOException ex) {
         
        }
        textarea.setText(input);


    }//GEN-LAST:event_import_btnActionPerformed

    private void hydroscale_cboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hydroscale_cboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hydroscale_cboActionPerformed

    private void reset_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_btnActionPerformed

        textarea.setText("");
        initThresholdSlider();

    }//GEN-LAST:event_reset_btnActionPerformed

    private void setDefault_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefault_btnActionPerformed
        slidingwindow_cbo.setSelectedItem("19");
        thresholdSlider.setValue(10);
        hydroscale_cbo.setSelectedIndex(0);
    }//GEN-LAST:event_setDefault_btnActionPerformed

    private void initSlidingWindowCbo() {
        for (int i = 19; i < 52; i++) {
            slidingwindow_cbo.addItem(Integer.toString(i));
        }
    }

    private void initThresholdSlider() {
        Hashtable labelTable = new Hashtable();
        labelTable.put(5, new JLabel("0.5"));
        labelTable.put(10, new JLabel("1.0"));
        labelTable.put(15, new JLabel("1.5"));
        labelTable.put(20, new JLabel("2.0"));
        labelTable.put(25, new JLabel("2.5"));
        thresholdSlider.setLabelTable(labelTable);

    }

    private void initScaleMap() {
        scaleMap.put('A', new double[]{1.8, -0.5, 0.2, 0.62, 0.74, 0.3, 1.6});
        scaleMap.put('C', new double[]{2.5, -1, 4.1, 0.29, 0.91, 0.9, 2});
        scaleMap.put('D', new double[]{-3.5, 3, -3.1, -0.9, 0.62, -0.6, -9.2});
        scaleMap.put('E', new double[]{-3.5, 3, -1.8, -0.74, 0.62, -0.7, -8.2});
        scaleMap.put('F', new double[]{2.8, -2.5, 4.4, 1.19, 0.88, 0.5, 3.7});
        scaleMap.put('G', new double[]{-0.4, 0, 0, 0.48, 0.72, 0.3, 1});
        scaleMap.put('H', new double[]{-3.2, -0.5, 0.5, -0.4, 0.78, -0.1, -3});
        scaleMap.put('I', new double[]{4.5, -1.8, 4.8, 1.38, 0.88, 0.7, 3.1});
        scaleMap.put('K', new double[]{-3.9, 3, -3.1, -1.5, 0.52, -1.8, -8.8});
        scaleMap.put('L', new double[]{3.8, -1.8, 5.7, 1.06, 0.85, 0.5, 2.8});
        scaleMap.put('M', new double[]{1.9, -1.3, 4.2, 0.64, 0.85, 0.4, 3.4});
        scaleMap.put('N', new double[]{-3.5, 0.2, -0.5, -0.78, 0.63, -0.5, -4.8});
        scaleMap.put('P', new double[]{-1.6, 0, -2.2, 0.12, 0.64, -0.3, -0.2});
        scaleMap.put('Q', new double[]{-3.5, 0.2, -2.8, -0.85, 0.62, -0.7, -4.1});
        scaleMap.put('R', new double[]{-4.5, 3, 1.4, -2.53, 0.64, -1.4, -12.3});
        scaleMap.put('S', new double[]{-0.8, 0.3, -0.5, -0.18, 0.66, -0.1, 0.6});
        scaleMap.put('T', new double[]{-0.7, -0.4, -1.9, -0.05, 0.7, -0.2, 1.2});
        scaleMap.put('V', new double[]{4.2, -1.5, 4.7, 1.08, 0.86, 0.6, 2.6});
        scaleMap.put('W', new double[]{-0.9, -3.4, 1, 0.81, 0.85, 0.3, 1.9});
        scaleMap.put('Y', new double[]{-1.3, -2.3, 3.2, 0.26, 0.76, -0.4, -0.7});

    }

    private void generatePlot(int windowLength, int scaleChosen, double threshold, ArrayList<ProteinSequence> seq) {
        ArrayList<ChartPanel> chartList = new ArrayList<>();

        for (ProteinSequence protein : seq) {
            ArrayList<Integer> starts = new ArrayList<>(0);
            ArrayList<Integer> ends = new ArrayList<>(0);
            if (windowLength > protein.sequence.length()) {
                JOptionPane.showMessageDialog(null, "" + protein.getID() + ": Insufficient protein sequence length.");
            } else if (protein.title == null) {
                JOptionPane.showMessageDialog(null, protein.getID() + ": Input is not in FASTA format.");
            } else if (protein.title != null && protein.sequence.isEmpty()) {
                JOptionPane.showMessageDialog(null, protein.getID() + ": Input is not in FASTA format.");
            } else if (!protein.valid()) {
                JOptionPane.showMessageDialog(null, protein.getID() + ": Input is not a protein.");
            } else {

                XYChart chart = new XYChartBuilder().width(700).height(700).
                        title(protein.title).
                        xAxisTitle("Position").
                        yAxisTitle("Ave. Hydrophobicity").
                        build();

                double[] pos = new double[protein.sequence.length()];
                for (int k = 0; k < pos.length; k++) {
                    pos[k] = k + 1;
                }
                double[] thresholdValue = new double[pos.length];
                for (int j = 0; j < thresholdValue.length; j++) {
                    thresholdValue[j] = threshold;
                }
                double[] ave = getHydroValue(scaleChosen, windowLength, protein.sequence);
                double[] indices = new double[ave.length];
                for (int k = 0, j = (windowLength / 2) + 1; k < indices.length; k++, j++) {
                    indices[k] = j;
                }
                if (indices.length > 1) {
                    chart.addSeries(protein.getID() + "", indices, ave).setMarker(new None());
                } else {
                    chart.addSeries(protein.getID() + "", indices, ave);
                }
                chart.addSeries("Threshold", pos, thresholdValue).setMarker(new None());
                double max = 0.0;
                for (int i = 0; i < ave.length; i++) {
                    if (max < ave[i]) {
                        max = ave[i];
                    }
                }

                for (int j = 0, trendCount = 0; j < ave.length - 3; j++) {
                    ArrayList<Double> trendX = new ArrayList<>();
                    for (int k = j, c = 0; k < ave.length; k++, c++) {
                        j = k;
                        if (ave[j] > threshold) {
                            trendX.add(indices[j]);
                        } else {
                            break;
                        }
                    }
                    if (trendX.size() >= windowLength) {
                        ArrayList<Double> trendY = new ArrayList<>();
                        for (int k = 0; k < trendX.size(); k++) {
                            trendY.add(max + 0.5);
                        }
                        chart.addSeries("Trend: " + ++trendCount,
                                trendX, trendY).setMarker(new None());
                        starts.add(trendX.get(0).intValue());
                        ends.add(trendX.get(trendX.size() - 1).intValue());
                    }
                }
                chartList.add(new ChartPanel(chart, starts, ends, protein.getID()));
            }
        }
        CreateCharts charts = new CreateCharts(chartList);
    }

    public double[] getHydroValue(int scaleChosen, int windowLength, String sequence) {
        int diff = (windowLength / 2) * 2;
        System.out.println(diff);
        double[] hydrovalue = new double[sequence.length() - diff];
        System.out.println(sequence.length() - diff);
        for (int i = 0; i < hydrovalue.length; i++) {
            double value = 0.0;
            for (int j = i, ctr = 0; ctr < windowLength; j++, ctr++) {
                value += this.scaleMap.get(sequence.charAt(j))[scaleChosen];
            }
            hydrovalue[i] = value / windowLength;
        }
        return hydrovalue;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnsLab3.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnsLab3.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnsLab3.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnsLab3.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new AnsLab3().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generate_btn;
    private javax.swing.JComboBox<String> hydroscale_cbo;
    private javax.swing.JButton import_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reset_btn;
    private javax.swing.JButton setDefault_btn;
    private javax.swing.JComboBox<String> slidingwindow_cbo;
    private javax.swing.JTextArea textarea;
    private javax.swing.JSlider thresholdSlider;
    // End of variables declaration//GEN-END:variables

    class ProteinSequence {

        String sequence;
        String title;

        ProteinSequence(String title, String sequence) {

            this.title = title;
            this.sequence = sequence.toUpperCase();
        }

        public String getID() {
            try {
                return this.title.split("\\|")[1];
            } catch (Exception e) {
                return this.title;
            }
        }

        public boolean valid() {
            return sequence.matches("[ACDEFGHIKLMNPQRSTVWY]+")
                    && sequence.startsWith("M");
        }
    }

    class ChartPanel {

        private XYChart chart;
        private JPanel panel;
        protected ArrayList<Integer> starts;
        protected ArrayList<Integer> ends;
        protected String id;
        protected String exception;

        public ChartPanel(String exception) {
            panel = new JPanel();
            this.panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
            panel.setBackground(Color.GREEN);
            panel.add(new JLabel(exception));
            this.exception = exception;
        }

        public ChartPanel(XYChart chart) {
            this.chart = chart;
            initComponents();
            starts = new ArrayList<>();
            ends = new ArrayList<>();
            exception = "";
        }

        public ChartPanel(XYChart chart, ArrayList<Integer> starts,
                ArrayList<Integer> ends, String id) {
            this.chart = chart;
            initComponents();
            this.starts = starts;
            this.ends = ends;
            this.id = id;
        }

        private void initComponents() {

            this.panel = new JPanel();
            this.panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
            this.panel.add(new XChartPanel(chart));
        }

        public JPanel getPanel() {
            return this.panel;
        }
    }

    class CreateCharts {

        private ArrayList<ChartPanel> charts;
        private JFrame frame;
        private String output;

        public CreateCharts(ArrayList<ChartPanel> charts) {
            this.charts = charts;
            initComponents();
            this.frame.setVisible(true);
            int res = JOptionPane.showConfirmDialog(null, "Generate Report?", "Pop-Up Menu", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                JFileChooser chooser = new JFileChooser();
                int retrival = chooser.showSaveDialog(this.frame);
                if (retrival == JFileChooser.APPROVE_OPTION) {
                    try {
                        FileWriter fw = new FileWriter(chooser.getSelectedFile() + ".txt");
                        fw.write(output);
                        fw.close();
                    } catch (Exception ex) {
                    }
                }
            }
        }

        private void initComponents() {

            frame = new JFrame("Hydrophobicity Graphs");

            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(800, 600);
            frame.setLocationRelativeTo(null);

            JPanel panel = new JPanel();
            panel.setSize(frame.getSize());
            panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

            this.output = "ID\tCount\tStart-End\r\n";

            for (ChartPanel chart : charts) {
                panel.add(chart.getPanel());
                if (chart.exception == null || chart.exception.isEmpty()) {
                    output += String.format("%s\t%d", chart.id, chart.starts.size());
                    for (int i = 0; i < chart.starts.size(); i++) {
                        output += String.format("\t%08d-%08d", chart.starts.get(i),
                                chart.ends.get(i));
                    }
                    output += "\r\n";
                } else {
                    output += chart.exception + "\r\n";
                }
            }

            JScrollPane scrollpane = new JScrollPane(panel);
            frame.add(scrollpane);
            frame.pack();
        }

        private void generateReportButtonPerformed(ActionEvent e) {//    String sb = output;

        }
    }
}
